# -*- coding: utf-8 -*-
"""dataset preparation .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kJJuZ7rTqoOwBk0Q9sH26zegflSPcsQH

## Upload
"""

#uploader just in case
from google.colab import files
uploaded = files.upload()

#created with use of these: 
#https://colab.research.google.com/github/TannerGilbert/Object-Detection-and-Image-Segmentation-with-Detectron2/blob/master/Detectron2_train_and_export_model.ipynb#scrollTo=Y19zWbMmnWlz

#mount drive with dataset

"""## Set Up"""

!pip install pyyaml==5.1
import torch, torchvision
print(torch.__version__, torch.cuda.is_available())
!gcc --version

import torch
assert torch.__version__.startswith("1.8")
print(torch.__version__)

!pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.8/index.html

exit(0) #if asks to restart runtime

#if torch.cuda.is_available() = False
#runtime->change runtime type->gpu

import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

import numpy as np
import cv2
import matplotlib.pyplot as plt

from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

"""## Datasets

once done, can be ignored

segmentation dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/sipakmed_dataset
# %ls

# Commented out IPython magic to ensure Python compatibility.
# %mkdir detection_dataset

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/sipakmed_dataset/detection_dataset
# %mkdir /content/drive/MyDrive/sipakmed_dataset/detection_dataset/images
# %mkdir /content/drive/MyDrive/sipakmed_dataset/detection_dataset/boundaries
# %ls

#renaming files according to class labels
import shutil
import os

glob_path = '/content/drive/MyDrive/sipakmed_dataset'
target1 = '/content/drive/MyDrive/sipakmed_dataset/detection_dataset/images'
target2 = '/content/drive/MyDrive/sipakmed_dataset/detection_dataset/boundaries'

ls = os.listdir(glob_path)
for i in range(5):
  print(ls[i])
  path = os.path.join(glob_path, ls[i])
  for _, _, files in os.walk(path):
    for f in files:
      filename = os.path.join(path, f)
      newfilename = os.path.join(path, ls[i] + '_' + f)
      os.rename(filename, newfilename)

#note: if gives Errno2, range(i,5) -> range(i+1, 5)
#or create exception

ls

#should be ~1682, 1849, 1888, 1857, 1752
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/im_Parabasal') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/im_Parabasal', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/im_Dyskeratotic') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/im_Dyskeratotic', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/im_Koilocytotic') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/im_Koilocytotic', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/im_Metaplastic') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/im_Metaplastic', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/im_Superficial-Intermediate') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/im_Superficial-Intermediate', name))]))

#should be ~966, 8042 or 4021
print(len([name for name in os.listdir(target1) if os.path.isfile(os.path.join(target1, name))]))
print(len([name for name in os.listdir(target2) if os.path.isfile(os.path.join(target2, name))]))

#utilitary, clean detection_dataset directories
import glob

files = glob.glob('/content/drive/MyDrive/sipakmed_dataset/detection_dataset/boundaries/*')
for f in files:
    os.remove(f)

files = glob.glob('/content/drive/MyDrive/sipakmed_dataset/detection_dataset/images/*')
for f in files:
    os.remove(f)

#debugging wrong renames
for i in range(5):
  print(ls[i])
  path = os.path.join(glob_path, ls[i])
  for _, _, files in os.walk(path):
    for f in files:
      if (f.startswith('im_Parabasal_im_Parabasal')):
          newf = f.replace('im_Parabasal_im_Parabasal', 'im_Parabasal')
          filename = os.path.join(path, f)
          newfilename = os.path.join(path, newf)
          os.rename(filename, newfilename)
      elif (f.startswith('im_Dyskeratoric_im_Dyskeratoric')):
          newf = f.replace('im_Dyskeratoric_im_Dyskeratoric', 'im_Dyskeratoric')
          filename = os.path.join(path, f)
          newfilename = os.path.join(path, newf)
          os.rename(filename, newfilename)
      elif (f.startswith('im_Koilocytotic_im_Koilocytotic')):
          newf = f.replace('im_Koilocytotic_im_Koilocytotic', 'im_Koilocytotic')
          filename = os.path.join(path, f)
          newfilename = os.path.join(path, newf)
          os.rename(filename, newfilename)
      elif (f.startswith('im_Metaplastic_im_Metaplastic')):
          newf = f.replace('im_Metaplastic_im_Metaplastic', 'im_Metaplastic')
          filename = os.path.join(path, f)
          newfilename = os.path.join(path, newf)
          os.rename(filename, newfilename)
      elif (f.startswith('im_Superficial-Intermediate_im_Superficial-Intermediate')):
          newf = f.replace('im_Superficial-Intermediate_im_Superficial-Intermediate', 'im_Superficial-Intermediate')
          filename = os.path.join(path, f)
          newfilename = os.path.join(path, newf)
          os.rename(filename, newfilename)

#copying files into segmentation_dataset
for i in range(4,5):
  print(ls[i])
  path = os.path.join(glob_path, ls[i])
  for _, _, files in os.walk(path):
    for f in files:
      if f.endswith('.bmp'):
          shutil.copyfile(os.path.join(glob_path, ls[i] + '/' + f), os.path.join(target1, f))
      else:
          shutil.copyfile(os.path.join(glob_path, ls[i] + '/' + f), os.path.join(target2, f))

#removing nuclei boundaries
for i in os.listdir(target2):
    if os.path.isfile(os.path.join(target2,i)) and 'nuc' in i:
        os.remove(os.path.join(target2,i))

"""Classification dataset"""

# Commented out IPython magic to ensure Python compatibility.
# %mkdir '/content/drive/MyDrive/sipakmed_dataset/classification_dataset'
# %mkdir '/content/drive/MyDrive/sipakmed_dataset/classification_dataset/t'
# %mkdir '/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Koilocytotic'
# %mkdir '/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Metaplastic'
# %mkdir '/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Parabasal'
# %mkdir '/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Superficial-Intermediate'

files = glob.glob('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Superficial-Intermediate/*')
for f in files:
    os.remove(f)

path_cl = '/content/drive/MyDrive/sipakmed_dataset/'
ls_cl = ['im_Parabasal', 'im_Koilocytotic', 'im_Superficial-Intermediate', 'im_Dyskeratotic', 'im_Metaplastic']
path_ds = '/content/drive/MyDrive/sipakmed_dataset/classification_dataset/'
for i in range(2,3):
  path_cl_tmp = path_cl + ls_cl[i] + '/CROPPED'
  path_ds_tmp = path_ds + ls_cl[i]
  print(path_cl_tmp)
  for _, _, fs in os.walk(path_cl_tmp):
    for f in fs:
      if f.endswith('.bmp'):
        shutil.copyfile(os.path.join(path_cl_tmp, f), os.path.join(path_ds_tmp, f))

#should be ~787, 813, 825, 793, 813
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Parabasal') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Parabasal', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Dyskeratotic') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Dyskeratotic', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Koilocytotic') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Koilocytotic', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Metaplastic') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Metaplastic', name))]))
print(len([name for name in os.listdir('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Superficial-Intermediate') if os.path.isfile(os.path.join('/content/drive/MyDrive/sipakmed_dataset/classification_dataset/im_Superficial-Intermediate', name))]))

#calculate mean resolution and reshape each image

"""segementation dataset ctnd, making it coco compatible for detectron2"""

import numpy as np
import json
from detectron2.structures import BoxMode

dt_dir = '/content/drive/MyDrive/sipakmed_dataset/detection_dataset'

INFO = {
    "description": "SKIPAMED dataset in COCO format",
    "url": "",
    "version": "",
    "year": 2021,
    "contributor": "",
    "date_created": ""
}

LICENSES = []

CATEGORIES = {
    "id": 1,
    "name": "cell",
    "supercategory": "cell"
}

def create_img_id(path):

def extract_boundaries(img_id):

def create_segmentation(img_id):

def create_area(img_id):

def create_bbox(img_id):

def get_dicts(dir):





"""## Detection/segmentation"""



"""## Classification"""

